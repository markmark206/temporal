// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: option2.proto

package option2

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContinueAsNewInitiator_Enum int32

const (
	ContinueAsNewInitiator_UNSPECIFIED   ContinueAsNewInitiator_Enum = 0
	ContinueAsNewInitiator_DECIDER       ContinueAsNewInitiator_Enum = 1
	ContinueAsNewInitiator_RETRY         ContinueAsNewInitiator_Enum = 2
	ContinueAsNewInitiator_CRON_SCHEDULE ContinueAsNewInitiator_Enum = 3
)

var ContinueAsNewInitiator_Enum_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "DECIDER",
	2: "RETRY",
	3: "CRON_SCHEDULE",
}

var ContinueAsNewInitiator_Enum_value = map[string]int32{
	"UNSPECIFIED":   0,
	"DECIDER":       1,
	"RETRY":         2,
	"CRON_SCHEDULE": 3,
}

func (x ContinueAsNewInitiator_Enum) String() string {
	return proto.EnumName(ContinueAsNewInitiator_Enum_name, int32(x))
}

func (ContinueAsNewInitiator_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1ace0f65baf2931, []int{0, 0}
}

type Bird_Enum int32

const (
	Bird_UNSPECIFIED Bird_Enum = 0
	Bird_BLUEJAY     Bird_Enum = 1
	Bird_CHICKEN     Bird_Enum = 2
)

var Bird_Enum_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "BLUEJAY",
	2: "CHICKEN",
}

var Bird_Enum_value = map[string]int32{
	"UNSPECIFIED": 0,
	"BLUEJAY":     1,
	"CHICKEN":     2,
}

func (x Bird_Enum) String() string {
	return proto.EnumName(Bird_Enum_name, int32(x))
}

func (Bird_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1ace0f65baf2931, []int{1, 0}
}

type ContinueAsNewInitiator struct {
}

func (m *ContinueAsNewInitiator) Reset()         { *m = ContinueAsNewInitiator{} }
func (m *ContinueAsNewInitiator) String() string { return proto.CompactTextString(m) }
func (*ContinueAsNewInitiator) ProtoMessage()    {}
func (*ContinueAsNewInitiator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1ace0f65baf2931, []int{0}
}
func (m *ContinueAsNewInitiator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinueAsNewInitiator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinueAsNewInitiator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinueAsNewInitiator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinueAsNewInitiator.Merge(m, src)
}
func (m *ContinueAsNewInitiator) XXX_Size() int {
	return m.Size()
}
func (m *ContinueAsNewInitiator) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinueAsNewInitiator.DiscardUnknown(m)
}

var xxx_messageInfo_ContinueAsNewInitiator proto.InternalMessageInfo

type Bird struct {
}

func (m *Bird) Reset()         { *m = Bird{} }
func (m *Bird) String() string { return proto.CompactTextString(m) }
func (*Bird) ProtoMessage()    {}
func (*Bird) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1ace0f65baf2931, []int{1}
}
func (m *Bird) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bird) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bird.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bird) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bird.Merge(m, src)
}
func (m *Bird) XXX_Size() int {
	return m.Size()
}
func (m *Bird) XXX_DiscardUnknown() {
	xxx_messageInfo_Bird.DiscardUnknown(m)
}

var xxx_messageInfo_Bird proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("option2.ContinueAsNewInitiator_Enum", ContinueAsNewInitiator_Enum_name, ContinueAsNewInitiator_Enum_value)
	proto.RegisterEnum("option2.Bird_Enum", Bird_Enum_name, Bird_Enum_value)
	proto.RegisterType((*ContinueAsNewInitiator)(nil), "option2.ContinueAsNewInitiator")
	proto.RegisterType((*Bird)(nil), "option2.Bird")
}

func init() { proto.RegisterFile("option2.proto", fileDescriptor_a1ace0f65baf2931) }

var fileDescriptor_a1ace0f65baf2931 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2f, 0x28, 0xc9,
	0xcc, 0xcf, 0x33, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x62, 0xb8,
	0xc4, 0x9c, 0xf3, 0xf3, 0x4a, 0x32, 0xf3, 0x4a, 0x53, 0x1d, 0x8b, 0xfd, 0x52, 0xcb, 0x3d, 0xf3,
	0x32, 0x4b, 0x32, 0x13, 0x4b, 0xf2, 0x8b, 0x94, 0x9c, 0xb8, 0x58, 0x5c, 0xf3, 0x4a, 0x73, 0x85,
	0xf8, 0xb9, 0xb8, 0x43, 0xfd, 0x82, 0x03, 0x5c, 0x9d, 0x3d, 0xdd, 0x3c, 0x5d, 0x5d, 0x04, 0x18,
	0x84, 0xb8, 0xb9, 0xd8, 0x5d, 0x5c, 0x9d, 0x3d, 0x5d, 0x5c, 0x83, 0x04, 0x18, 0x85, 0x38, 0xb9,
	0x58, 0x83, 0x5c, 0x43, 0x82, 0x22, 0x05, 0x98, 0x84, 0x04, 0xb9, 0x78, 0x9d, 0x83, 0xfc, 0xfd,
	0xe2, 0x83, 0x9d, 0x3d, 0x5c, 0x5d, 0x42, 0x7d, 0x5c, 0x05, 0x98, 0x95, 0x2c, 0xb9, 0x58, 0x9c,
	0x32, 0x8b, 0x52, 0x94, 0x0c, 0xf1, 0x98, 0xe5, 0xe4, 0x13, 0xea, 0xea, 0xe5, 0x18, 0x29, 0xc0,
	0x08, 0xe2, 0x38, 0x7b, 0x78, 0x3a, 0x7b, 0xbb, 0xfa, 0x09, 0x30, 0x39, 0x59, 0x9f, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78,
	0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x03, 0x97, 0x70, 0x66, 0xbe, 0x5e, 0x49, 0x6a, 0x6e, 0x41,
	0x7e, 0x51, 0x62, 0x8e, 0x1e, 0xd4, 0x1f, 0x4e, 0x5c, 0x01, 0x20, 0x7f, 0xf9, 0x25, 0xe6, 0xa6,
	0x16, 0x07, 0x30, 0x26, 0xb1, 0x81, 0x7d, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xe4,
	0x0d, 0xd2, 0xf6, 0x00, 0x00, 0x00,
}

func (m *ContinueAsNewInitiator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinueAsNewInitiator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinueAsNewInitiator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bird) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bird) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bird) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintOption2(dAtA []byte, offset int, v uint64) int {
	offset -= sovOption2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContinueAsNewInitiator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bird) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovOption2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOption2(x uint64) (n int) {
	return sovOption2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContinueAsNewInitiator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOption2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinueAsNewInitiator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinueAsNewInitiator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOption2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOption2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOption2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bird) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOption2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bird: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bird: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOption2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOption2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOption2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOption2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOption2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOption2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOption2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOption2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOption2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOption2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOption2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOption2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOption2 = fmt.Errorf("proto: unexpected end of group")
)
